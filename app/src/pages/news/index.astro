---
import Layout from '../../layouts/Layout.astro';
import NewsCard from '../../components/NewsCard.astro';
import Footer from '../../components/Footer.astro';
import type { News } from '../../types';
import { api } from '../../lib/api';

// ビルド時に全データ取得
const result = await api.getNewsList({ page: 1, per_page: 100 });
const allNews: News[] = result.success ? result.data.items : [];

// カテゴリ別に分類
const newsByCategory = {
  information: allNews.filter(n => {
    const cat = (n.categories?.[0] || '').toLowerCase();
    return cat === 'information' || cat === '' || !cat;
  }),
  blog: allNews.filter(n => (n.categories?.[0] || '').toLowerCase() === 'blog'),
  movie: allNews.filter(n => (n.categories?.[0] || '').toLowerCase() === 'movie')
};

// JSON-LD用に全ニュースを使用
const news: News[] = allNews;

// ニュース一覧のJSON-LDを生成
const newsJsonLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "itemListElement": news.map((item, index) => ({
    "@type": "NewsArticle",
    "position": index + 1,
    "headline": item.title,
    "datePublished": item.date,
    "author": {
      "@type": "Organization",
      "name": "little"
    },
    "url": `https://little-salon.com/news/${item.id}`
  }))
};
---

<Layout 
  title="NEWS / お知らせ - little"
  description="littleの最新ニュースやお知らせをお届けします。"
  jsonLd={JSON.stringify(newsJsonLd)}
>
  <!-- 認証チェック用のスクリプト -->
  <script>
    // 認証状態をチェック
    function checkAuthStatus() {
      const isAuthenticated = sessionStorage.getItem('authenticated') === 'true';
      const authTime = sessionStorage.getItem('authTime');
      const currentTime = Date.now();
      const authTimeout = 24 * 60 * 60 * 1000; // 24時間
      
      if (isAuthenticated && authTime && (currentTime - parseInt(authTime)) < authTimeout) {
        return true;
      } else if (isAuthenticated) {
        // 認証が期限切れの場合
        sessionStorage.removeItem('authenticated');
        sessionStorage.removeItem('username');
        sessionStorage.removeItem('authTime');
      }
      return false;
    }
    
    // 認証ページにリダイレクト
    function redirectToAuth() {
      window.location.href = '/auth.html';
    }
    
    // 認証チェックを実行
    if (!checkAuthStatus()) {
      redirectToAuth();
    }
  </script>
  <!-- ページ全体の背景をbeigeに設定 -->
  <div class="bg-beige">
    
    <!-- パンくずリスト -->
    <div class="breadcrumb">
      <div class="breadcrumb__container">
        <nav class="breadcrumb__nav">
          <a href="/" class="breadcrumb__link">ホーム</a>
          <span class="breadcrumb__separator">/</span>
          <span class="breadcrumb__current">NEWS</span>
        </nav>
      </div>
    </div>

    <!-- メインコンテンツ -->
    <main class="news-main">
      <div class="news-container">
        
        <!-- ページタイトル -->
        <h2 class="news-title section-title text-h1">
          NEWS<img src="/images/title_slash.svg" alt="/" class="title-slash" /><span class="news-title-sub section-title-sub">お知らせ</span>
        </h2>
        
        <!-- タブナビゲーション -->
        <div class="news-tabs">
          <button class="news-tab active" data-category="information">INFORMATION</button>
          <button class="news-tab" data-category="blog">BLOG</button>
          <button class="news-tab" data-category="movie">MOVIE</button>
        </div>
        
        <!-- ニュース一覧（JavaScriptで動的生成） -->
        <div class="news-list" id="news-list">
        </div>

        <!-- ページネーション（JavaScriptで動的生成） -->
        <div class="news-pagination" id="news-pagination">
        </div>
        
        <!-- データをJSON形式で埋め込み -->
        <script type="application/json" id="news-data" set:html={JSON.stringify(newsByCategory)}>
        </script>

      </div>
    </main>

    <!-- フッター -->
    <Footer />

  </div>
</Layout>

<style>
  @import "tailwindcss";
  
  /* パンくずリスト */
  .breadcrumb {
    background-color: var(--color-beige);
    padding: 92px 0 12px 0;
  }

  .breadcrumb__container {
    max-width: 1040px;
    margin: 0 auto;
    padding: 0 55px;
  }

  .breadcrumb__nav {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .breadcrumb__link {
    font-family: var(--font-family-zenkaku);
    font-size: 14px;
    font-weight: var(--font-weight-regular);
    color: var(--color-grey-dark);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .breadcrumb__link:hover {
    color: var(--color-brown);
  }

  .breadcrumb__separator {
    font-family: var(--font-family-zenkaku);
    font-size: 14px;
    color: var(--color-grey-dark);
  }

  .breadcrumb__current {
    font-family: var(--font-family-zenkaku);
    font-size: 14px;
    font-weight: var(--font-weight-regular);
    color: var(--color-grey-dark);
  }

  /* メインコンテンツ */
  .news-main {
    background-color: var(--color-beige);
    min-height: calc(100vh - 80px - 24px); /* ヘッダーとパンくずリストの高さを除く */
    padding: 80px 0;
  }

  .news-container {
    max-width: 1040px;
    margin: 0 auto;
    padding: 0 55px;
  }

  /* 共通セクションタイトル */
  .section-title {
    font-family: var(--font-family-yumincho);
    color: var(--color-black);
    text-align: left;
    height: 64px;
    font-size: 64px;
    line-height: 1.0;
    margin-bottom: 40px;
  }
  
  .section-title-sub {
    font-size: 24px;
    vertical-align: middle;
  }

  /* タイトルスラッシュのスタイル */
  .title-slash {
    height: 28px;
    width: auto;
    margin: 0 0.5rem;
    display: inline-block;
  }

  /* タブナビゲーション */
  .news-tabs {
    display: flex;
    gap: 8px;
    margin-bottom: 28px;
  }

  .news-tab {
    background: none;
    border: none;
    color: var(--color-grey-light);
    font-family: var(--font-family-zenkaku);
    font-size: 24px;
    font-weight: 500;
    padding: 1rem 2rem;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
    flex: 1;
    text-align: center;
    text-decoration: none;
    display: inline-block;
  }

  .news-tab::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 4px;
    background-color: var(--color-grey-light);
  }

  .news-tab.active {
    color: var(--color-text-black);
  }

  .news-tab.active::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 4px;
    background-color: var(--color-text-black);
  }

  /* ニュース一覧 */
  :global(.news-list) {
    margin: 0 auto;
  }

  :global(.news-item) {
    display: flex;
    gap: 1.5rem;
    padding: 32px 0;
    border-bottom: 1px solid var(--color-grey-light);
  }

  :global(.news-image) {
    width: 240px;
    height: 134px;
    object-fit: cover;
    flex-shrink: 0;
  }

  :global(.news-content) {
    flex: 1;
  }

  :global(.news-meta) {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
  }

  :global(.news-date) {
    font-family: var(--font-family-zenkaku);
    font-size: 24px;
    color: var(--color-text-grey-medium);
  }

  :global(.news-separator) {
    font-family: var(--font-family-zenkaku);
    font-size: 24px;
    color: var(--color-text-grey-medium);
  }

  :global(.news-category) {
    font-family: var(--font-family-zenkaku);
    font-size: 24px;
    font-weight: var(--font-weight-regular);
    color: var(--color-text-grey-medium);
  }

  :global(.news-item-title) {
    font-family: var(--font-family-zenkaku);
    font-size: 24px;
    font-weight: var(--font-weight-medium);
    color: var(--color-black);
    margin-bottom: 8px;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  :global(.news-item-link) {
    color: var(--color-black);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  :global(.news-item-link:hover) {
    color: var(--color-brown);
  }

  :global(.news-description) {
    font-family: var(--font-family-zenkaku);
    font-size: 16px;
    line-height: 1.5;
    font-weight: var(--font-weight-regular);
    font-style: normal;
    color: var(--color-text-grey-medium);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* ページネーション */
  :global(.news-pagination) {
    display: flex;
    justify-content: center;
    padding-top: 56px;
  }

  :global(.pagination) {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  :global(.pagination__link) {
    font-family: var(--font-family-zenkaku);
    font-size: 16px;
    font-weight: var(--font-weight-regular);
    color: var(--color-grey-dark);
    background: none;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  :global(.pagination__link--active) {
    color: var(--color-black);
    text-decoration: underline;
  }

  :global(.pagination__link:hover) {
    color: var(--color-black);
    background-color: var(--color-grey-light);
  }

  :global(.pagination__dots) {
    font-family: var(--font-family-zenkaku);
    font-size: 16px;
    color: var(--color-grey-dark);
    padding: 8px 4px;
  }

  :global(.pagination__prev),
  :global(.pagination__next) {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    color: var(--color-grey-dark);
    background: none;
    border: none;
    border-radius: 4px;
    transition: all 0.3s ease;
    cursor: pointer;
    padding: 0;
  }

  :global(.pagination__prev:hover),
  :global(.pagination__next:hover) {
    color: var(--color-black);
    background-color: var(--color-grey-light);
  }

  :global(.pagination__arrow) {
    width: 16px;
    height: 16px;
  }


  /* レスポンシブ対応 */
  @media (max-width: 1023px) {
    .news-container {
      padding: 0 40px;
    }

    .section-title {
      height: auto;
      margin-bottom: 32px;
    }
    
    .section-title-sub {
      font-size: 20px;
    }
  }

  @media (max-width: 767px) {
    .breadcrumb__container {
      padding: 0 24px;
    }

    .news-main {
      padding: 40px 0;
    }

    .news-container {
      padding: 0 24px;
    }

    .section-title {
      display: flex;
      width: 180px;
      height: 75px;
      font-size: 36px;
      align-items: baseline;
      align-content: flex-start;
      gap: 6px 11px;
      flex-wrap: wrap;
    }
    
    .title-slash {
      margin: 0;
    }
    
    .section-title-sub {
      margin: 0;
      font-size: 16px;
    }

    .news-tabs {
      flex-wrap: wrap;
      gap: 4px;
    }

    .news-tab {
      font-size: 18px;
      padding: 0.75rem 1rem;
    }

    :global(.news-item) {
      flex-direction: column;
      gap: 24px;
      padding: 32px 0;
    }

    :global(.news-image) {
      width: 100%;
      height: 182px;
    }

    :global(.news-date),
    :global(.news-separator),
    :global(.news-category) {
      font-size: 20px;
    }

    :global(.news-item-title) {
      font-size: 20px;
    }

    :global(.news-description) {
      font-size: 14px;
    }
  }

  @media (max-width: 480px) {
    .section-title {
      margin-bottom: 20px;
    }
    
    .section-title-sub {
      font-size: 14px;
    }

    .news-tab {
      font-size: 16px;
      padding: 0.5rem 0.75rem;
    }
  }
</style>

<script>
  const perPage = 4;
  let currentType = 'information';
  let currentPage = 1;
  
  // データ読み込み
  const newsData = JSON.parse(document.getElementById('news-data').textContent);
  
  // URLハッシュから初期状態を復元
  function loadStateFromHash() {
    const hash = window.location.hash.substring(1);
    const params = new URLSearchParams(hash);
    currentType = params.get('type') || 'information';
    currentPage = Number(params.get('page') || '1');
  }
  
  // URLハッシュを更新
  function updateHash() {
    window.location.hash = `type=${currentType}&page=${currentPage}`;
  }
  
  // ニュースアイテムをレンダリング
  function renderNews() {
    const items = newsData[currentType] || [];
    const startIndex = (currentPage - 1) * perPage;
    const endIndex = startIndex + perPage;
    const pageItems = items.slice(startIndex, endIndex);
    
    const newsList = document.getElementById('news-list');
    newsList.innerHTML = pageItems.map(item => `
      <div class="news-item">
        ${item.featured_image ? `<img src="${item.featured_image}" alt="${item.title}" class="news-image" />` : ''}
        <div class="news-content">
          <div class="news-meta">
            <span class="news-date">${item.date.replace(/-/g, '.').substring(0, 10)}</span>
            <span class="news-separator">|</span>
            ${item.categories?.[0] ? `<span class="news-category">${item.categories[0]}</span>` : ''}
          </div>
          <h3 class="news-item-title">
            <a href="/news/${item.id}" class="news-item-link">${item.title}</a>
          </h3>
          <p class="news-description">${item.excerpt}</p>
        </div>
      </div>
    `).join('');
    
    renderPagination(items.length);
  }
  
  // ページネーションをレンダリング
  function renderPagination(totalItems) {
    const totalPages = Math.max(1, Math.ceil(totalItems / perPage));
    const pagination = document.getElementById('news-pagination');
    
    if (totalPages <= 1) {
      pagination.innerHTML = '';
      return;
    }
    
    let html = '<nav class="pagination">';
    
    // 前へ
    if (currentPage > 1) {
      html += `<button class="pagination__link pagination__prev" data-page="${currentPage - 1}">
        <svg class="pagination__arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>`;
    }
    
    // ページ番号
    for (let i = 1; i <= Math.min(5, totalPages); i++) {
      const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i - 1;
      if (pageNum > totalPages) break;
      html += `<button class="pagination__link ${pageNum === currentPage ? 'pagination__link--active' : ''}" data-page="${pageNum}">${pageNum}</button>`;
    }
    
    // 次へ
    if (currentPage < totalPages) {
      html += `<button class="pagination__link pagination__next" data-page="${currentPage + 1}">
        <svg class="pagination__arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>`;
    }
    
    html += '</nav>';
    pagination.innerHTML = html;
    
    // ページネーションのイベントリスナー
    pagination.querySelectorAll('[data-page]').forEach(btn => {
      btn.addEventListener('click', () => {
        currentPage = Number(btn.dataset.page);
        updateHash();
        renderNews();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    });
  }
  
  // タブ切り替え
  document.querySelectorAll('.news-tab').forEach(tab => {
    tab.addEventListener('click', () => {
      document.querySelectorAll('.news-tab').forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      currentType = tab.dataset.category;
      currentPage = 1; // タブ切り替え時はページ1にリセット
      updateHash();
      renderNews();
    });
  });
  
  // 初期化
  loadStateFromHash();
  document.querySelectorAll('.news-tab').forEach(tab => {
    tab.classList.toggle('active', tab.dataset.category === currentType);
  });
  renderNews();
  
  // ブラウザバック/フォワード対応
  window.addEventListener('hashchange', () => {
    loadStateFromHash();
    document.querySelectorAll('.news-tab').forEach(tab => {
      tab.classList.toggle('active', tab.dataset.category === currentType);
    });
    renderNews();
  });
</script>

